<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Celery on I&#39;m Groooooot</title>
    <link>https://lovemma.github.io/tags/celery/</link>
    <description>Recent content in Celery on I&#39;m Groooooot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 Sep 2019 10:58:12 +0000</lastBuildDate>
    
	<atom:link href="https://lovemma.github.io/tags/celery/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Celery 4.2 内存泄漏问题</title>
      <link>https://lovemma.github.io/posts/memory-leak-in-celery-4-2/</link>
      <pubDate>Wed, 18 Sep 2019 10:58:12 +0000</pubDate>
      
      <guid>https://lovemma.github.io/posts/memory-leak-in-celery-4-2/</guid>
      <description>在使用 Celery 4.2 版本时，遇到了内存泄漏问题，话不多说先上运行环境： Python 版本：2.7.5 Celery 版本：4.2.2 系统：CentOS AsyncTask 的内存泄漏 开发环境跑了一段时间之后，出现发布任务的 service 内存占用很高，而且会出现任务发布不了的情况。但发布任务的 service 并没有做什么太过复杂的操作，经过分析之后，将问题定位在了 chord 函数中会使用了 apply_async 来插入大量的 task。 复现 写了一个简单的测试脚本来测试 chord : # -*- coding: utf-8 -*- import resource from celery import Celery, chord backend_url = &amp;#39;redis://redis:6379/1&amp;#39; broker_url = &amp;#39;pyamqp://rabbitmq:5672//?heartbeat=30&amp;#39; app = Celery(&amp;#39;task&amp;#39;,</description>
    </item>
    
    <item>
      <title>0到1，Celery从入门到出家</title>
      <link>https://lovemma.github.io/posts/0%E5%88%B01celery%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%AE%B6/</link>
      <pubDate>Fri, 28 Sep 2018 10:06:12 +0000</pubDate>
      
      <guid>https://lovemma.github.io/posts/0%E5%88%B01celery%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%87%BA%E5%AE%B6/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文转载自公众号「Python之禅」，原文链接：&lt;a href=&#34;https://mp.weixin.qq.com/s/w63Ut5zZjlOypvrhO7YWIA&#34;&gt;https://mp.weixin.qq.com/s/w63Ut5zZjlOypvrhO7YWIA&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在一个应用服务中，对于时效性要求没那么高的业务场景，我们没必要等到所有任务执行完才返回结果，例如用户注册场景中，保存了用户账号密码之后，就可以立即返回，后续的账号激活邮件，可以用一种异步的形式去处理，这种异步操作可以用队列服务来实现。否则，如果等到邮件发送成功可能几秒过去了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>